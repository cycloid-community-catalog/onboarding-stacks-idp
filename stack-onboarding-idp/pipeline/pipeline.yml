resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ($ .env $)
    backend_type: http
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
    vars:
      aws_cred: ((aws_cred))
      github_pat: ((github_pat))
      team_members_infrastructure: ((team_members_infrastructure))
      team_members_application: ((team_members_application))
      team_members_integration: ((team_members_integration))
      project_owner: ($ .project_owner $)
      cy_child_org_canonical: ((cy_child_org_canonical))
      aws_region: ((aws_region))
      cy_api_key: ((cy_api_key))
      cy_api_url: ($ .api_url $)
      cy_org: ($ .org $)
      cy_project: ($ .project $)
      cy_env: ($ .env $)
      cy_component: ($ .component $)


# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .scs_url $)
    branch: ($ .scs_branch $)
    ($- if eq .scs_cred_type "basic_auth" $)
    username: ((($ .scs_cred_path $).username))
    password: ((($ .scs_cred_path $).password))
    ($- end $)
    ($- if eq .scs_cred_type "ssh" $)
    private_key: ((($ .scs_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .stack_path $)/terraform/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
    ($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
    ($- end $)
    ($- if eq .cr_cred_type "ssh" $)
    private_key: ((($ .cr_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .config_root $)/terraform/*


groups:
- name: overview
  jobs:
    - deploy

- name: destroy
  jobs:
    - destroy


jobs:
  - name: deploy
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true
        - get: git_config-terraform
          trigger: true

      - task: create-organization
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -c
            - |
              set +e
              cy organization create --name ${CHILD_ORG} --parent-canonical ${ORG} >output 2>&1
              if [[ "$?" != "0" ]]; then
                  echo "Unable to create organization ${CHILD_ORG}"
                  echo "Error: $? - $(cat output)"
              fi
          params:
            CHILD_ORG: ((cy_child_org_canonical))
            ORG: ($ .organization $)
            CY_API_URL: ($ .api_url $)
            CY_API_KEY: ((cy_api_key))

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .config_root $)/terraform
          STACK_PATH: ($ .stack_path $)/terraform

      - put: tfstate
        params:
          terraform_source: merged-stack/


      - task: post-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -c
            - |
              set +e
              for projiter in "Infrastructure" "Application"
              do
                MAX_RETRIES=30
                COUNT=0
                while [ $COUNT -lt $MAX_RETRIES ]; do
                  set +e
                  cy project create --project "${projiter,,}" --name "${projiter}" --org "${CHILD_ORG}" --update
                  if [ $? -eq 0 ]; then
                    echo "Project ${projiter} created successfully."
                    break
                  fi
                  COUNT=$((COUNT + 1))
                  echo "Attempt $COUNT failed... retrying"
                  sleep 1
                done

                for enviter in "OTH-DEV" "PPE" "PRD"
                do
                  MAX_RETRIES=30
                  COUNT=0
                  while [ $COUNT -lt $MAX_RETRIES ]; do
                    set +e
                    cy environment create --project "${projiter,,}" --env "${enviter,,}" --name "${enviter}" --org "${CHILD_ORG}" --update
                    if [ $? -eq 0 ]; then
                      echo "Environment ${enviter} created successfully."
                      break
                    fi
                    COUNT=$((COUNT + 1))
                    echo "Attempt $COUNT failed... retrying"
                    sleep 1
                  done
                done
              done
              curl -X POST \
                -H "Content-type: application/vnd.cycloid.io.v1+json" \
                -H "authorization: Bearer ${CY_API_KEY}" \
                -d '{
                  "name": "List All",
                  "canonical": "list-all",
                  "description": "Role to list all resources",
                  "rules": [
                    {
                        "action": "**:list",
                        "effect": "allow",
                        "resources": []
                    }
                  ]
                }' "${CY_API_URL}/organizations/${CHILD_ORG}/roles" | jq .
              curl -X POST \
                -H "Content-type: application/vnd.cycloid.io.v1+json" \
                -H "authorization: Bearer ${CY_API_KEY}" \
                -d '{
                  "name": "Infrastructure",
                  "canonical": "infrastructure",
                  "description": "Role to access the infrastructure stacks and projects",
                  "rules": [
                    {
                      "action": "organization:service_catalog:*",
                      "effect": "allow",
                      "resources": [
                        "organization:myidporg:service_catalog:myidporg:stack-kind-argocd",
                        "organization:myidporg:service_catalog:myidporg:stack-postgresql-idp"
                      ]
                    },
                    {
                      "action": "organization:project:*",
                      "effect": "allow",
                      "resources": [
                        "organization:myidporg:project:infrastructure"
                      ]
                    }
                  ]
                }' "${CY_API_URL}/organizations/${CHILD_ORG}/roles" | jq .
              curl -X POST \
                -H "Content-type: application/vnd.cycloid.io.v1+json" \
                -H "authorization: Bearer ${CY_API_KEY}" \
                -d '{
                  "name": "Application",
                  "canonical": "application",
                  "description": "Role to access the application stacks and projects",
                  "rules": [
                    {
                      "action": "organization:service_catalog:*",
                      "effect": "allow",
                      "resources": [
                        "organization:myidporg:service_catalog:myidporg:stack-project-github-gitops-idp",
                        "organization:myidporg:service_catalog:myidporg:stack-postgresql-idp"
                      ]
                    },
                    {
                      "action": "organization:project:*",
                      "effect": "allow",
                      "resources": [
                        "organization:myidporg:project:application"
                      ]
                    }
                  ]
                }' "${CY_API_URL}/organizations/${CHILD_ORG}/roles" | jq .
              curl -X POST \
                -H "Content-type: application/vnd.cycloid.io.v1+json" \
                -H "authorization: Bearer ${CY_API_KEY}" \
                -d '{
                  "name": "Integration",
                  "canonical": "integration",
                  "description": "Role to deploy the application in PPE and PRD environments",
                  "rules": [
                    {
                      "action": "organization:service_catalog:*",
                      "effect": "allow",
                      "resources": [
                        "organization:myidporg:service_catalog:myidporg:stack-postgresql-idp"
                      ]
                    },
                    {
                      "action": "organization:project:*",
                      "effect": "allow",
                      "resources": [
                        "organization:myidporg:project:application"
                      ]
                    }
                  ]
                }' "${CY_API_URL}/organizations/${CHILD_ORG}/roles" | jq .
              curl -X POST \
                -H "Content-type: application/vnd.cycloid.io.v1+json" \
                -H "authorization: Bearer ${CY_API_KEY}" \
                -d '{
                  "name": "Infrastructure",
                  "canonical": "infrastructure",
                  "owner": "($ .project_owner $)",
                  "roles_canonical": [
                    "list-all",
                    "infrastructure"
                  ]
                }' "${CY_API_URL}/organizations/${CHILD_ORG}/teams" | jq .
              curl -X POST \
                -H "Content-type: application/vnd.cycloid.io.v1+json" \
                -H "authorization: Bearer ${CY_API_KEY}" \
                -d '{
                  "name": "Application",
                  "canonical": "application",
                  "owner": "($ .project_owner $)",
                  "roles_canonical": [
                    "list-all",
                    "application"
                  ]
                }' "${CY_API_URL}/organizations/${CHILD_ORG}/teams" | jq .
              for member in "${TEAM_MEMBERS_INFRASTRUCTURE}"
              do
                curl -X POST \
                  -H "Content-type: application/vnd.cycloid.io.v1+json" \
                  -H "authorization: Bearer ${CY_API_KEY}" \
                  -d '{
                    "username": '"${member}"',
                  }' "${CY_API_URL}/organizations/${CHILD_ORG}/teams/infrastructure/members" | jq .
              done
          params:
            CHILD_ORG: ((cy_child_org_canonical))
            TEAM_MEMBERS_INFRASTRUCTURE: ((team_members_infrastructure))
            TEAM_MEMBERS_APPLICATION: ((team_members_application))
            TEAM_MEMBERS_INTEGRATION: ((team_members_integration))
            ORG: ($ .organization $)
            CY_API_URL: ($ .api_url $)
            CY_API_KEY: ((cy_api_key))


  - name: destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
        - get: git_config-terraform
          trigger: false
        - get: tfstate
          trigger: false

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .config_root $)/terraform
          STACK_PATH: ($ .stack_path $)/terraform

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy