resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ($ .env $)
    backend_type: http
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
    vars:
      github_pat: ((github_pat))
      github_organization: ((github_organization))
      github_repo_description: ((github_repo_description))
      github_repo_visibility: ((github_repo_visibility))
      cy_api_key: ((cy_api_key))
      cy_api_url: ($ .api_url $)
      cy_org: ($ .org $)
      cy_project: ($ .project $)
      cy_env: ($ .env $)
      cy_component: ($ .component $)


# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .scs_url $)
    branch: ($ .scs_branch $)
    ($- if eq .scs_cred_type "basic_auth" $)
    username: ((($ .scs_cred_path $).username))
    password: ((($ .scs_cred_path $).password))
    ($- end $)
    ($- if eq .scs_cred_type "ssh" $)
    private_key: ((($ .scs_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .stack_path $)/terraform/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
    ($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
    ($- end $)
    ($- if eq .cr_cred_type "ssh" $)
    private_key: ((($ .cr_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .config_root $)/terraform/*

groups:
- name: overview
  jobs:
    - project-init

- name: destroy
  jobs:
    - project-destroy


jobs:
  - name: project-init
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .config_root $)/terraform
          STACK_PATH: ($ .stack_path $)/terraform

      - put: tfstate
        params:
          terraform_source: merged-stack/

      - task: scaffold-project
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: node
              tag: latest
          run:
            path: /bin/bash
            args:
            - -ecx
            - |
              apt-get update
              apt-get install jq -y
              mkdir -p ~/.ssh
              
              # Get SSH key from Terraform outputs
              SSH_KEY=$(cat tfstate/metadata | jq -r '.ssh_private_key')
              GIT_SSH_URL=$(cat tfstate/metadata | jq -r '.git_ssh_url')
              
              echo "$SSH_KEY" >~/.ssh/git
              chmod 600 ~/.ssh/git
              eval "$(ssh-agent -s)"
              ssh-add ~/.ssh/git
              
              # Extract host from SSH URL and add to known_hosts
              GIT_HOST=$(echo $GIT_SSH_URL | sed 's|git@||' | sed 's|:.*||')
              ssh-keyscan -t rsa $GIT_HOST >> ~/.ssh/known_hosts
              
              git clone ${GIT_SOURCE_URL} source
              git clone $GIT_SSH_URL dest
              if [ -z "$(ls -A dest | grep -v -e README.md -e .git)" ]; then
                rm -rf source/.git
                mv source/${GIT_SOURCE_PATH}/* dest/
                mv source/${GIT_SOURCE_PATH}/.* dest/ 2>/dev/null || true
                cd dest/
                git config --global user.email "devops@cycloid.io"
                git config --global user.name "Cycloid"
                git add .
                git commit -m "Initial commit"
                git push

                echo "Application scaffolding completed."
              else
                echo "Application scaffolding aborted. Your GIT repository is not empty."
              fi
          inputs:
          - name: tfstate
            path: "tfstate"
        params:
          USE_CASE: ($ .use_case $)
          GIT_SOURCE_URL: ((git_source_url))
          GIT_SOURCE_PATH: ((git_source_path))
          GIT_DEST_URL: ((git_dest_url))
          GIT_DEST_KEY: ((git_dest_key))
          PROJECT: ($ .project $)

      - task: create-pr-monitor-component
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: bash
            args:
              - "-ec"
              - |
                echo "fetching required stacks..."
                STACKS="$(cy stack list -o json)"
                stack_self="$(echo "$STACKS" | jq -r '.[] | select(.canonical == "($ .stack $)") | .ref')"
                echo "stack: $stack_self"

                echo "  Create PR Monitor Component"
                MAX_RETRIES=30
                COUNT=0
                while [ $COUNT -lt $MAX_RETRIES ]; do
                  set +e
                  cy component create --update \
                    --project "$CY_PROJECT" --env "${CY_ENV}" \
                    --component "pr-monitor" \
                    --name "PR Monitor" \
                    --stack-ref "$stack_self" --use-case "pr" \
                    -o yaml

                  if [ $? -eq 0 ]; then
                    echo "Component created successfully."
                    break
                  fi

                  COUNT=$((COUNT + 1))
                  echo "Attempt $COUNT failed... retrying"

                  sleep 1
                done

                echo "  Create Environment for staging"
                MAX_RETRIES=30
                COUNT=0
                while [ $COUNT -lt $MAX_RETRIES ]; do
                  set +e
                  cy environment create --update \
                    --project "$CY_PROJECT" --env "staging" \
                    --name "Staging"

                  if [ $? -eq 0 ]; then
                    echo "Environment created successfully."
                    break
                  fi

                  COUNT=$((COUNT + 1))
                  echo "Attempt $COUNT failed... retrying"

                  sleep 1
                done

          params:
            CY_API_KEY: ((cy_api_key))
            CY_API_URL: ($ .api_url $)
            CY_ORG: ($ .org $)
            CY_PROJECT: ($ .project $)
            CY_ENV: ($ .env $)



  # Destroy the infrastructure
  - name: project-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
        - get: git_config-terraform
          trigger: false
        - get: tfstate
          trigger: false

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .config_root $)/terraform
          STACK_PATH: ($ .stack_path $)/terraform

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy