---
version: "2"
use_cases:
- name: default
  sections:
  - name: Application
    groups:
    - name: Application Git Repository
      technologies: [pipeline]
      vars:
      - name: "Application Git URL"
        description: "Git URL where the application is stored."
        key: app_git_url
        widget: cy_inventory_resource
        widget_config:
          attribute: ssh_clone_url
          filters:
            type: github_repository
            project: ($ .project $)
        required: true
        type: string
      - name: "Application Git Branch or Tag"
        description: "Git branch or tag where the application is stored."
        key: app_git_branch
        widget: auto_complete
        type: string
        values: ["develop", "main", "master", "v1.0.0"]
        default: "main"
        required: true
      - name: "SSH Key"
        description: "The SSH private key to access the git repository."
        key: app_git_ssh_key
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - ssh
        type: string
        default: "((($ .project $)-($ .env $)-git-ssh.ssh_key))"
        required: true

    - name: Database Integration
      technologies: [pipeline]
      vars:
      - name: "Database Integration"
        description: "Is there a connection string to build from a Cycloid inventory database and a Cycloid secret?"
        key: database_integration
        widget: switch
        type: boolean
        default: false
        required: true

    - name: Database Type
      technologies: [pipeline]
      condition: "database_integration==true"
      vars:
      - name: "Connection String Env Var Name"
        description: "Name of the environment variable where the database connection string will be stored for your application."
        key: database_env_var_name
        widget: simple_text
        required: false
        type: string
        default: "DATABASE_URL"
      - name: "Database Engine"
        description: "Select the database engine that your application will connect to."
        key: database_engine
        widget: radios
        required: true
        type: map
        values:
        - {label: "PostgreSQL", value: "postgresql"}
        - {label: "MySQL", value: "mysql"}
        default: "PostgreSQL"
      - name: "Managed Database Provider"
        description: "Select the database engine that your application will connect to."
        key: database_cloud
        widget: radios
        required: true
        type: map
        values:
        - {label: "AWS RDS", value: "aws"}
        - {label: "Azure Managed Database", value: "azure"}
        default: "AWS RDS"
    - name: AWS RDS Selection
      technologies: [pipeline]
      condition: "database_integration==true && database_cloud=='AWS RDS'"
      vars:
      - name: "AWS RDS"
        description: "Select the AWS RDS instance that Prisma will connect to."
        key: database_aws
        widget: cy_inventory_resource
        widget_config:
          attribute: endpoint
          filters:
            type: aws_db_instance
            project: ($ .project $)
            environment: ($ .env $)
        required: true
        type: string
    - name: Azure Managed Database Selection
      technologies: [pipeline]
      condition: "database_integration==true && database_cloud=='Azure Managed Database'"
      vars:
      - name: "Azure Managed Database"
        description: "Select the Azure Managed Database that your application will connect to."
        key: database_azure
        widget: cy_inventory_resource
        widget_config:
          attribute: id
          filters:
            type: azurerm_postgresql_flexible_server
            project: ($ .project $)
            environment: ($ .env $)
        required: true
        type: string
    - name: Database Name
      technologies: [pipeline]
      condition: "database_integration==true"
      vars:
      - name: "Database Name"
        description: "Database name that your application will connect to."
        key: database_name
        widget: simple_text
        required: true
        type: string
    - name: Environment Variables
      technologies: [pipeline, templating]
      vars:
      - name: "Environment Variables"
        description: "Other environment variables to provide to your application."
        key: app_env_vars
        widget: text_area
        required: true
        type: string
        default: |-
          APP_VAR_1=VAL1
          APP_VAR_2=VAL2
      - name: "Number of Replicas"
        description: "The number of replicas to deploy in the Kubernetes Cluster."
        key: app_replicas
        widget: number
        type: "integer"
        default: 3
        required: true

    - name: Kubernetes Cluster
      technologies: [pipeline, templating]
      vars:
      - name: "Kubeconfig"
        description: "The Kubeconfig to access your Kubernetes Cluster."
        key: kubeconfig_content
        widget: cy_cred
        widget_config:
          display_keys: true
          cred_types:
            - custom
        type: string
        default: ((($ .project $)-($ .env $)-kubeconfig.kubeconfig))
        required: true

    - name: ArgoCD Git Repository
      technologies: [pipeline, templating]
      vars:
      - name: "ArgoCD Git Repository"
        description: "The ArgoCD Git Repository to send the manifests to."
        key: argocd_git_url
        widget: cy_inventory_resource
        widget_config:
          attribute: http_clone_url
          filters:
            type: github_repository
            project: ($ .project $)
        required: true
        type: string
      - name: "ArgoCD Git Branch"
        description: "The ArgoCD Git Branch to send the manifests to."
        key: argocd_git_branch
        widget: auto_complete
        type: string
        values: ["main", "master"]
        default: "main"
        required: true
      - name: "ArgoCD Git Repository SSH Key"
        description: "The ArgoCD Git Repository SSH Key to access the git repository."
        key: argocd_git_ssh_key
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - ssh
        type: string
        default: "((($ .project $)-($ .env $)-git-ssh.ssh_key))"

    - name: DockerHub Registry
      technologies: [pipeline, templating]
      vars:
      - name: "DockerHub Repository"
        description: "The DockerHub repository to store your application images."
        key: dockerhub_repository
        widget: simple_text
        required: true
        type: string
        default: "olivier2t/app-test-env"
      - name: "DockerHub Credentials"
        description: "The DockerHub credentials to access the registry."
        key: dockerhub_cred
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - basic_auth
        required: true
        type: string
        default: "((dockerhub))"